version: '3.8'
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: slots_user
      POSTGRES_PASSWORD: secret_pass
      POSTGRES_DB: slots_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U slots_user"]
      interval: 10s
      timeout: 5s
      retries: 5
  dynamodb-local:
    image: amazon/dynamodb-local
    command: -jar DynamoDBLocal.jar -inMemory -sharedDb
    ports:
      - "8002:8000"
  dynamodb-init:
    image: amazon/aws-cli
    depends_on:
      - dynamodb-local
    environment:
      AWS_ACCESS_KEY_ID:     dummy
      AWS_SECRET_ACCESS_KEY: dummy
      AWS_DEFAULT_REGION:    eu-west-1
    entrypoint: [
      "sh", "-c",
      "echo \"⏳ Waiting for DynamoDB to be available…\"; \
       until aws dynamodb list-tables --endpoint-url http://dynamodb-local:8000 | grep -q TimeSlots; do \
         echo \"⏳ Creating TimeSlots table (or waiting)…\"; \
         aws dynamodb create-table \
           --table-name TimeSlots \
           --attribute-definitions AttributeName=userEmail,AttributeType=S AttributeName=slotId,AttributeType=S \
           --key-schema AttributeName=userEmail,KeyType=HASH AttributeName=slotId,KeyType=RANGE \
           --billing-mode PAY_PER_REQUEST \
           --endpoint-url http://dynamodb-local:8000 || true; \
         sleep 5; \
       done; \
       echo \"✅ Таблиця TimeSlots готова!\""
    ]
    restart: "no"
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672" 
      - "15672:15672"
  auth-service:
    build:
      context: .  
      dockerfile: app/auth/Dockerfile
    environment:
      DATABASE_URL: sqlite+aiosqlite:///./test.db
      RABBIT_URL: amqp://guest:guest@rabbitmq:5672/
    volumes:
      - .:/app
    ports:
      - "8000:8000"
  rabbit-listener:
    build:
      context: .
      dockerfile: app/rabbit_listener/Dockerfile
    environment:
      RABBIT_URL: amqp://guest:guest@rabbitmq:5672/
    restart: on-failure
    depends_on:
      - rabbitmq
  mail-sender:
    build:
      context: .
      dockerfile: app/mail_sender/Dockerfile
    environment:
      RABBIT_URL: amqp://guest:guest@rabbitmq:5672/
      AWS_REGION:  eu-west-1
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
    depends_on:
      - rabbitmq
  slots-service:
    build:
      context: .
      dockerfile: app/slots/Dockerfile
    volumes:
      - .:/app
    environment:
      AWS_ACCESS_KEY_ID:      dummy
      AWS_SECRET_ACCESS_KEY:  dummy
      AWS_REGION: eu-west-1
      SLOTS_TABLE: TimeSlots
      DYNAMODB_ENDPOINT: http://dynamodb-local:8000
    depends_on:
      dynamodb-init:
        condition: service_completed_successfully
    ports:
      - "8001:8001"
  free-slots-service:
    build:
      context: .
      dockerfile: app/free_slots/Dockerfile
    volumes:
      - .:/app
    environment:
      AWS_ACCESS_KEY_ID:      dummy
      AWS_SECRET_ACCESS_KEY:  dummy
      AWS_REGION: eu-west-1
      SLOTS_TABLE: TimeSlots
      DYNAMODB_ENDPOINT: http://dynamodb-local:8000
    depends_on:
      dynamodb-init:
        condition: service_completed_successfully
    ports:
      - "8003:8003"
  booking-service:
    build:
      context: .
      dockerfile: app/booking/Dockerfile
    volumes:
      - .:/app
    ports:
      - "8005:8005"
    depends_on:
      - postgres
volumes:
  pgdata: