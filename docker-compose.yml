version: '3.8'
services:
  consul:
    image: consul:1.15
    command: agent -dev -client=0.0.0.0
    ports:
      - "8500:8500"
      - "8600:8600/udp"
  dynamodb-local:
    image: amazon/dynamodb-local
    command: -jar DynamoDBLocal.jar -inMemory -sharedDb
    ports:
      - "8002:8000"
  dynamodb-init:
    image: amazon/aws-cli
    depends_on:
      - dynamodb-local
    environment:
      AWS_ACCESS_KEY_ID:     dummy
      AWS_SECRET_ACCESS_KEY: dummy
      AWS_DEFAULT_REGION:    eu-west-1
    entrypoint: [
      "sh", "-c",
      "echo \"⏳ Waiting for DynamoDB to be available…\"; \
       until aws dynamodb list-tables --endpoint-url http://dynamodb-local:8000 | grep -q TimeSlots; do \
         echo \"⏳ Creating TimeSlots table (or waiting)…\"; \
         aws dynamodb create-table \
           --table-name TimeSlots \
           --attribute-definitions AttributeName=userEmail,AttributeType=S AttributeName=slotId,AttributeType=S \
           --key-schema AttributeName=userEmail,KeyType=HASH AttributeName=slotId,KeyType=RANGE \
           --billing-mode PAY_PER_REQUEST \
           --endpoint-url http://dynamodb-local:8000 || true; \
         sleep 5; \
      done; \
      echo \"✅ Таблиця TimeSlots готова!\"; \
      until aws dynamodb list-tables --endpoint-url http://dynamodb-local:8000 | grep -q Reservations; do \
       echo \"⏳ Creating Reservations…\"; \
       aws dynamodb create-table --table-name Reservations \
         --attribute-definitions \
           AttributeName=participantEmail,AttributeType=S \
           AttributeName=creatorEmail,AttributeType=S \
         --key-schema \
           AttributeName=participantEmail,KeyType=HASH \
           AttributeName=creatorEmail,KeyType=RANGE \
         --billing-mode PAY_PER_REQUEST \
         --endpoint-url http://dynamodb-local:8000 || true; \
       sleep 5; \
     done; \
     echo \"✅ Reservations готова!\""
    ]
    restart: "no"
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672" 
      - "15672:15672"
  auth-service:
    build:
      context: .
      dockerfile: app/auth/Dockerfile
    environment:
      SERVICE_NAME: auth-service
      CONSUL_HOST:  consul
      CONSUL_PORT:  8500
      SERVICE_PORT: 8000
      DATABASE_URL: sqlite+aiosqlite:///./test.db
      RABBIT_URL:   amqp://guest:guest@rabbitmq:5672/
    volumes:
      - .:/app
    expose:
      - "8000"
    depends_on:
      - consul
      - rabbitmq
  rabbit-listener:
    build:
      context: .
      dockerfile: app/rabbit_listener/Dockerfile
    environment:
      RABBIT_URL: amqp://guest:guest@rabbitmq:5672/
    restart: on-failure
    depends_on:
      - rabbitmq
  mail-sender:
    build:
      context: .
      dockerfile: app/mail_sender/Dockerfile
    environment:
      RABBIT_URL: amqp://guest:guest@rabbitmq:5672/
      AWS_REGION:  eu-west-1
      AWS_ACCESS_KEY_ID: dummy
      AWS_SECRET_ACCESS_KEY: dummy
    depends_on:
      - rabbitmq
  slots-service:
    build:
      context: .
      dockerfile: app/slots/Dockerfile
    environment:
      SERVICE_NAME:       slots-service
      CONSUL_HOST:        consul
      CONSUL_PORT:        8500
      SERVICE_PORT:       8001
      AWS_ACCESS_KEY_ID:  dummy
      AWS_SECRET_ACCESS_KEY: dummy
      AWS_REGION:         eu-west-1
      SLOTS_TABLE:        TimeSlots
      DYNAMODB_ENDPOINT:  http://dynamodb-local:8000
    volumes:
      - .:/app
    expose:
      - "8001"
    depends_on:
      - consul
      - dynamodb-init
  free-slots-service:
    build:
      context: .
      dockerfile: app/free_slots/Dockerfile
    environment:
      SERVICE_NAME:       free-slots-service
      CONSUL_HOST:        consul
      CONSUL_PORT:        8500
      SERVICE_PORT:       8003
      AWS_ACCESS_KEY_ID:  dummy
      AWS_SECRET_ACCESS_KEY: dummy
      AWS_REGION:         eu-west-1
      SLOTS_TABLE:        TimeSlots
      DYNAMODB_ENDPOINT:  http://dynamodb-local:8000
    volumes:
      - .:/app
    expose:
      - "8003"
    depends_on:
      - consul
      - dynamodb-init
  booking-service:
    build:
      context: .
      dockerfile: app/booking/Dockerfile
    environment:
      SERVICE_NAME:          booking-service
      CONSUL_HOST:           consul
      CONSUL_PORT:           8500
      SERVICE_PORT:          8005
      AWS_ACCESS_KEY_ID:     dummy
      AWS_SECRET_ACCESS_KEY: dummy
      AWS_REGION:            eu-west-1
      SLOTS_TABLE:           TimeSlots
      RESERVATIONS_TABLE:    Reservations
      DYNAMODB_ENDPOINT:     http://dynamodb-local:8000
    volumes:
      - .:/app
    expose:
      - "8005"
    depends_on:
      - consul
      - dynamodb-init
  facade:
    build:
      context: .
      dockerfile: app/facade/Dockerfile
    environment:
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
    ports:
      - "8005:8000"
    depends_on:
      - consul
      - auth-service
      - slots-service
      - free-slots-service
      - booking-service